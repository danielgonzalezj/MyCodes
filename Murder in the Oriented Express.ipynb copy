{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ba826dc",
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "source": [
    "A Daniel Gonzalez game demo\n",
    "\n",
    "Introduction:\n",
    "    This game is based on a movie called \"Murder on the Oriented Express\".\n",
    "    This movie science/fiction movie is about a famous detective called Hercule\n",
    "    Poirot. After resolving a stolen artifact investigation in Jerusalem, he\n",
    "    is ask to help in a investigation called the \"Kassner Case\" in London. \n",
    "    Figuring out on how to get there, he join a ride in the Oriented Express. \n",
    "    Little did he know that a murder was about to happen while he is enjoying\n",
    "    his ride.\n",
    "    \n",
    "    Link to IMDB:\n",
    "        https://www.imdb.com/title/tt3402236/.\n",
    "        \n",
    "    Bugs:\n",
    "        Exit function\n",
    "        Implementing the \"try/except\" in the loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "806de31e",
   "metadata": {
    "cell_style": "center",
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    Welcome to the Oriented Express Game!\n",
      "    \n",
      "    Can I please have your name? lk\n",
      "\n",
      "    Thanks for playing detective Lk Poirot!\n",
      "    Today, we will be taking our players to one of your most famost cases of\n",
      "    all time.\n",
      "    \n",
      "\n",
      "Press enter to start stage_1. \n",
      "\n",
      "    While taking vacations in Jerusalem, you are in a hotel treated\n",
      "    as a special guest by the government. The hotel cooks serve you \n",
      "    2 eggs, and they are not the same size!\n",
      "\n",
      "    What do you say to the waitress?\n",
      "    \n",
      "        1)Thanks!\n",
      "        2)No, no, no!\n",
      "    \n",
      "    Enter answer: ill eat them\n",
      "\n",
      "Invalid command. Please, enter one of the options.\n",
      "\n",
      "    While taking vacations in Jerusalem, you are in a hotel treated\n",
      "    as a special guest by the government. The hotel cooks serve you \n",
      "    2 eggs, and they are not the same size!\n",
      "\n",
      "    What do you say to the waitress?\n",
      "    \n",
      "        1)Thanks!\n",
      "        2)No, no, no!\n",
      "    \n",
      "    Enter answer: yes\n",
      "\n",
      "        You eat the eggs unsatisfied because you are a perfectionist \n",
      "        and even eggs that are not the same bothers you.\n",
      "        \n",
      "\n",
      "Pres enter to start stage_2\n",
      "\n",
      "    A government officer mentions that a crime just happened, and they \n",
      "    need you to perform one of your miracles!\n",
      "\n",
      "    A priceless relic was found stolen from a church and the police are blaming a \n",
      "    Rabbi, a Priest and a Iman that had a reunion there earlier in the day. \n",
      "    Without evidence, you do an investigation and found out that it was:\n",
      "\n",
      "        1)The Rabbi\n",
      "        2)The Priest\n",
      "        3)The Iman\n",
      "        4)The Police\n",
      "        5)The Goverment\n",
      "\n",
      "    Who do think it was the responsable? 1\n",
      "\n",
      "Don't blame innocent people. You have 2 guesses remaining.\n",
      "\n",
      "    Who do think it was the responsable? police\n",
      "\n",
      "        That's correct!\n",
      "\n",
      "        Tring to blame innocent people, the police left a small crack\n",
      "        from from a shoe. You, Poriot, probably the world best detective, notice\n",
      "        that the crak was from a military shoe.\n",
      "        \n",
      "\n",
      "Pres enter to continue \n",
      "\n",
      "    Now, I will need the name of your best friend hh\n",
      "\n",
      "    Appreciating some bread in a bakery, you meet a friend called\n",
      "    Hh who is riding the Oriented Express at 7pm.\n",
      "    While talking to him, a British consultant aproach you to help solve the \n",
      "    'Kassner Case' in London.\n",
      "    \n",
      "    Will you help this poor man solve the case?\n",
      "    \n",
      "        1)No\n",
      "        2)Yes \n"
     ]
    }
   ],
   "source": [
    "def user():\n",
    "    \n",
    "    #name input for detective\n",
    "    name = input(\"\"\"\n",
    "    Welcome to the Oriented Express Game!\n",
    "    \n",
    "    Can I please have your name? \"\"\")\n",
    "    \n",
    "    print(f\"\"\"\n",
    "    Thanks for playing detective {name.capitalize()} Poirot!\n",
    "    Today, we will be taking our players to one of your most famost cases of\n",
    "    all time.\n",
    "    \"\"\")\n",
    "    \n",
    "    input(\"\"\"\\nPress enter to start stage_1. \"\"\")\n",
    "    breakfast()\n",
    "    \n",
    "#declaring stage_1 \"Jerusalem\"\n",
    "def breakfast():\n",
    "    \n",
    "    print(\"\"\"\n",
    "    While taking vacations in Jerusalem, you are in a hotel treated\n",
    "    as a special guest by the government. The hotel cooks serve you \n",
    "    2 eggs, and they are not the same size!\"\"\")\n",
    "    \n",
    "    #declaring decision for waitress\n",
    "    waitres = input(prompt = \"\"\"\n",
    "    What do you say to the waitress?\n",
    "    \n",
    "        1)Thanks!\n",
    "        2)No, no, no!\n",
    "    \n",
    "    Enter answer: \"\"\")\n",
    "    \n",
    "     # developing a conditional statement\n",
    "    if \"1\" in waitres or \"yes\" in waitres.casefold() or \"thanks\" in \\\n",
    "    waitres.casefold():\n",
    "        print(\"\"\"\n",
    "        You eat the eggs unsatisfied because you are a perfectionist \n",
    "        and even eggs that are not the same bothers you.\n",
    "        \"\"\")\n",
    "        input(\"\"\"\\nPres enter to start stage_2\"\"\")\n",
    "        case_1()\n",
    "\n",
    "    elif \"2\" in waitres or \"no\" in waitres.casefold() or \"dont\" in \\\n",
    "    waitres.casefold():\n",
    "        print(\"\"\"\n",
    "        Surprise from your decision, the send a kid to get more\n",
    "        eggs from a chicken! When the kid brings the eggs back, they are still\n",
    "        uneven. You gave up and donâ€™t eat the eggs, blaming the chicken for\n",
    "        not being perfect.\n",
    "        \"\"\")\n",
    "        input(\"\"\"\\nPres enter to start stage_2 \"\"\")\n",
    "        case_1()\n",
    "\n",
    "    else:\n",
    "        print(\"\"\"\\nInvalid command. Please, enter one of the options.\"\"\")\n",
    "        breakfast()\n",
    "        \n",
    "        \n",
    "#declaring stage_2 \"Responsable\"      \n",
    "def case_1():\n",
    "    \n",
    "    print(\"\"\"\n",
    "    A government officer mentions that a crime just happened, and they \n",
    "    need you to perform one of your miracles!\n",
    "\n",
    "    A priceless relic was found stolen from a church and the police are blaming a \n",
    "    Rabbi, a Priest and a Iman that had a reunion there earlier in the day. \n",
    "    Without evidence, you do an investigation and found out that it was:\n",
    "\n",
    "        1)The Rabbi\n",
    "        2)The Priest\n",
    "        3)The Iman\n",
    "        4)The Police\n",
    "        5)The Goverment\"\"\")\n",
    "\n",
    "    #declaring objects for choice\n",
    "    responsable = 4\n",
    "    guesses =3\n",
    "\n",
    "    # looping until a user is out of guesses\n",
    "    while guesses > 0:\n",
    "        choice = input(\"\"\"\n",
    "    Who do think it was the responsable? \"\"\" )\n",
    "\n",
    "\n",
    "        # nested conditional statement based on user input\n",
    "        if choice == \"4\" or \"police\" in choice.casefold() or \"four\" in\\\n",
    "        choice.casefold():\n",
    "            print(\"\"\"\n",
    "        That's correct!\"\"\")\n",
    "            explination_1()\n",
    "            break\n",
    "            \n",
    "\n",
    "        elif choice != \"4\" or \"police\" in choice.casefold():\n",
    "            guesses -= 1\n",
    "\n",
    "            if guesses > 0:\n",
    "                print(f\"\"\"\\nDon't blame innocent people. You have {guesses} guesses remaining.\"\"\")\n",
    "\n",
    "            elif guesses == 0:\n",
    "                print(f\"\"\"\\nYou are out of guesses. The responsable was {responsable}, the police!\"\"\")\n",
    "                explination_1()\n",
    "                break\n",
    "\n",
    "            else:\n",
    "                print(\"\"\"\\nError.\"\"\")\n",
    "                case_1()\n",
    "\n",
    "        # setting a different error message for inner and outer loops\n",
    "        else:\n",
    "            print(\"\\nSomething went wrong.\")\n",
    "            case_1()\n",
    "            \n",
    "            \n",
    "#explination of the answer.            \n",
    "def explination_1():\n",
    "            \n",
    "        print(\"\"\"\n",
    "        Tring to blame innocent people, the police left a small crack\n",
    "        from from a shoe. You, Poriot, probably the world best detective, notice\n",
    "        that the crak was from a military shoe.\n",
    "        \"\"\")\n",
    "        \n",
    "        input(\"\"\"\\nPres enter to continue \"\"\")\n",
    "        barkery()\n",
    "        \n",
    "        explination_1()\n",
    "\n",
    "        \n",
    "#making decisions in a bakery       \n",
    "def barkery():\n",
    "    \n",
    "    #name input for the detective friend\n",
    "    name_friend = input(f\"\"\"\n",
    "    Now, I will need the name of your best friend \"\"\")\n",
    "    \n",
    "    print (f\"\"\"\n",
    "    Appreciating some bread in a bakery, you meet a friend called\n",
    "    {name_friend.capitalize()} who is riding the Oriented Express at 7pm.\n",
    "    While talking to him, a British consultant aproach you to help solve the \n",
    "    'Kassner Case' in London.\n",
    "    \n",
    "    Will you help this poor man solve the case?\n",
    "    \n",
    "        1)No\n",
    "        2)Yes \"\"\")\n",
    "    \n",
    "    \n",
    "    #input for decision making\n",
    "    solve_case = input(\"\"\"\n",
    "    Enter answer: \"\"\")\n",
    "    \n",
    "    if \"no\" in solve_case.casefold() or \"don't\" in solve_case.casefold() or \\\n",
    "    \"not\" in solve_case.casefold() or \"1\" in solve_case or \"one\" in \\\n",
    "    solve_case.casefold():\n",
    "        print(\"\"\"\\nWhy? That the hall point of this game.\"\"\")\n",
    "        fail()\n",
    "        \n",
    "    elif \"yes\" in solve_case.casefold() or \"of course\" in solve_case.casefold() \\\n",
    "    or \"2\" in solve_case or \"two\" in solve_case.casefold():\n",
    "        print(f\"\"\"\n",
    "        Confirming that you would help the British consultant, you ask {name_friend.capitalize()}\n",
    "        if their is a chance you could join the Oriented Express road to London.\n",
    "        \"\"\")\n",
    "        input(\"\"\"\\nPress enter to join the train in stage_3\"\"\") \n",
    "        train()\n",
    "\n",
    "    else:\n",
    "        print(\"\"\"\\nInvalid input, please try again.\"\"\")\n",
    "        barkery()\n",
    "        \n",
    "\n",
    "#fail fuction if you decide on not to help the man.   \n",
    "def fail():\n",
    "    \n",
    "    import sys\n",
    "    \n",
    "    print(\"\"\"\\nYou really are a bad detective.\"\"\")\n",
    "    print(\"\"\"\\nGame Over. If you will like, you could star again.\n",
    "    \n",
    "        1)Start again\n",
    "        2)Exit\"\"\")\n",
    "    \n",
    "    decision = input(\"\"\"\\nEnter answer: \"\"\")\n",
    "        \n",
    "    if \"1\" in decision or \"one\" in decision.casefold() or \"start again\" in \\\n",
    "    decision.casefold() or \"start\" in decision.casefold() or \"again\" in \\\n",
    "    decision.casefold():\n",
    "        breakfast()\n",
    "            \n",
    "    elif \"2\" in decision or \"two\" in decision.casefold() or \"exit\" in \\\n",
    "    decision.casefold():\n",
    "        sys.exit()\n",
    "        \n",
    "    else:\n",
    "        print(\"\"\"Invalid entry, please try again.\"\"\")\n",
    "        fail()\n",
    "    \n",
    "#declaring a stage_3 \"Train\"\n",
    "def train():\n",
    "    \n",
    "    print(\"\"\"\n",
    "    After boarding the train you meet several passangers and one of the is\n",
    "    called Ratchet. Ratchet knowing you are a very famous detective, sit at your\n",
    "    table and ask for someprotection. After offering $15k you automatically refuse.\n",
    "    \n",
    "        Poirot: \"I dont need your dirty money.\"\n",
    "        \n",
    "        Ratchet: \"I'm offended.\"\n",
    "        \n",
    "    Afer Ratchet leave the table, you resume reading a book and laughing alone.\"\"\")\n",
    "    \n",
    "    print(\"\"\"\n",
    "    A stormy night was happening at the moment and you hear a lot of people\n",
    "    running in the hallway.\n",
    "    \n",
    "    What do you rather do?\n",
    "    \n",
    "        1)Keep sleeping\n",
    "        2)Stand and check whats goin on\"\"\")\n",
    "    \n",
    "    \n",
    "    #input for sleeping decision\n",
    "    train_input = input(\"\"\"\n",
    "    Enter answer: \"\"\")\n",
    "        \n",
    "    if \"1\" in train_input or \"one\" in train_input.casefold() or \"sleep\" in \\\n",
    "    train_input.casefold():\n",
    "        finish_line()\n",
    "            \n",
    "    elif \"2\" in train_input or \"two\" in train_input.casefold or \"stand\" in \\\n",
    "    train_input.casefold() or \"check\" in train_input.casefold():\n",
    "        print(\"\"\"\n",
    "        You stand up, check and dont see anthing. So you go back to sleep.\"\"\")\n",
    "        finish_line()\n",
    "            \n",
    "    else:\n",
    "        print(\"\"\"Invalid input, please try again.\"\"\")\n",
    "        train()\n",
    "        \n",
    "        \n",
    "#declaring the last part of the game       \n",
    "def finish_line():\n",
    "    \n",
    "    #exit for de game\n",
    "    import sys\n",
    "    \n",
    "    print(\"\"\"\n",
    "    The next morning, while everyone is having breakfast. One of the waitres\n",
    "    notice Mr. Ratchet was missing. Curious, you knock on the door and he didn't\n",
    "    answer. While the maneger was searching for the key, you decide to break the\n",
    "    lock. With a cold room, you find Mr. Ratchet dead.\n",
    "    \n",
    "    Thanks for playing this demo :) if you want to see the rest, buy the movie.\"\"\")\n",
    "    input(\"\"\"\n",
    "    Press enter to exit the game\"\"\")\n",
    "    sys.exit()\n",
    "    finish_line()\n",
    "    \n",
    "user()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2318edf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
